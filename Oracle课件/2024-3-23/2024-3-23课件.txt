课程大纲：
   1.Oracle数据库：
      1.sql基础部分（笔试部分，重要）
	     1.关系型数据库的概念和设计
		 2.数据库基础对象（了解）
		    用户：
			权限：
			角色：
			数据库表空间：（掌握）
		 3.sql语言（重点）
		    DQL:查询
			DML:数据操纵语言：
			DDL:数据定义语言:
			TCL:事务控制语言：
			DCL:数据控制语言：
			系统函数：
			   基本系统函数：
			   分析函数：
			      行列转换：
				  开窗函数：
				  层级操作：
				  正则函数：
			   
	  2.PL/SQL:(面试部分，重要)
	     1.PL/SQL编程基础
		 2.游标操作：
		 3.异常处理：
		 4.存储过程（非常重要）
		 5.自定义函数：（重要）
		 6.程序包：
		 7.触发器：
		 8.序列：	
	  
	  3.oracle数据库优化（面试必问  非常重要）
	     1.在设计阶段进行优化
		   创建物化视图
		   建立索引
		   创建表分区
		 2.在sql阶段进行优化
		   sql语句优化
		   执行计划查看
		   执行计划的修改等等
   
   
   2.Linux操作系统：
      1.Linux中的命令
	  2.shell脚本编写
   
   3.hadoop大数据平台：（面试必问）
     1.数仓知识
	 2.认识大数据平台中的组件
	 3.搭建hadoop集群
	 4.学习  hdfs    mapreduce   hive  sqoop ......
	 5.讲解一些数据分析的小案例
	 6.ETL工具：kettle    dataX ........

   4.项目阶段：
      1.电商数仓项目：
	      技术栈：Linux+hadoop+hive+sqoop+fineBI+azkaban+mysql
	  2.银行项目：
	      技术栈：Oracle+pl/SQL+kettle|datax+fineBI|finereport
   
   
   5.python数据分析：
      1.python基础
	  2.数据分析三剑客：pandas   numpy   matplotlib
	  3.爬虫
	  
	  
1.数据库概念：
   DB:数据库简称，主要就是用来保存数据以及进行数据管理的一种技术。
   DBMS:数据库管理系统，主要就是用来管理和操作计算机磁盘上保存的各种物理文件的一种数据软件。
   RDBMS:关系型数据库系统
       Oracle    mysql    sqlserver    db2  gauss .....
   nosql:非关系型数据库
         Hbase       ES       redis     .......
	
   关系型数据库是基于关系模型构建：
   关系模型：就是由行和列组成的一种二维表格。
   
   关系模型中常见的概念：
      1.元组：在关系模型中元组就是二维表格中的一行数据。
	  2.属性：在关系模型中属性就是二维表格中的列，列名就叫做属性名。
	  3.域：在关系模型中域就是二维表格中的每一列数据的取值范围，其实就是数据类型。
	  4.键（关键码）：
	     超键：可以唯一识别一个元组的一个属性或者是多个属性的组合。
		      例如：(用户ID,姓名）  （姓名,密码,手机号）.......
		 候选键：属于超键，但是属性中不能包含一些无效的属性。
		      例如：（用户ID）   (姓名,密码)   (手机号)
		 主键：属于候选键，一般都是从多个候选键中选择一个作为主键即可。
		 外键：主要就是将两个模型进行关联。
	  
用户ID    姓名    密码    手机号    邮箱    性别  
     关系模型特点：
	   1.关系模型中每一个属性都必须要具有原子性。
	   2.关系模型中的每一个元组必须都是唯一的，不能由相同的元组。
	   3.理论上来说关系模型中的元组没有行号，但是在实际工作中可以使用rownum来指定行号。
	   
	   
	范式建模（遵循三范式）（面试会问）：
    范式：主要就是用来规定进行关系模型构建的时候应该遵循的标准：三范式
    
	目的：减少数据冗余，提高磁盘的利用率，节省空间，方便维护数据之间的一致性。
	第一范式：是数据库中建模的最低标准，要求二维模型中的所有的属性都必须要具有原子性不能拆分。
	第二范式：消除部分依赖，所有的非主属性，都必须要完全的依赖到主属性中。
	           消除部分依赖的主要方式就是进行拆分模型。
	第三范式：在第二范式的基础上消除传递依赖，全部直接依赖。
	
	关系模型中属性之间的依赖关系：
	  部份依赖：一般存在于组合主键中，也就是说非主属性只依赖主属性其中的一部分。
	  完全依赖：非主属性要一栏主属性中所有的属性，叫做完全依赖。
	  传递依赖：属性A依赖属性B，属性B依赖属性C，则属性A间接依赖到属性C。
	  
	  
	注意：在现在工作过程中可以适当的允许数据冗余来提高程序的查询性能。
	
	
	
	

	
学生信息模型：不符合第一范式
学号     姓名          系名系主任             课程号     课程名     成绩
1001     张三         计算机科学王主任          01        语文       90
1001     张三         计算机科学王主任          02        数学       99
1002     李四         计算机科学王主任          01        数学       80


优化后：符合第一范式  主属性：（学号，课程号）
学号     姓名          系名          系主任          课程号     课程名     成绩
1001     张三         计算机科学      王主任          01        语文       90
1001     张三         计算机科学      王主任          02        数学       99
1002     李四         计算机科学      王主任          01        数学       80


优化后：符合第二范式  
学生表     （学号）
学号    姓名       系名           系主任
1001    张三      计算机科学     王主任
1002    李四      计算机科学     王主任

课程表    （课程号）
课程号      课程名
01           语文
02           数学

成绩表   （学号 ， 课程号）
学号      课程号     成绩
1001        01       90
1001        02       99
1002        01       80


优化后：符合三范式
学生表
学号    姓名      系名
1001    张三      计算机科学
1002     李四     计算机科学


系表
系名         系主任
计算机科学   王主任



课程表    （课程号）
课程号      课程名
01           语文
02           数学

成绩表   （学号 ， 课程号）
学号      课程号     成绩
1001        01       90
1001        02       99
1002        01       80



数据库模型的设计：
   1.概要设计：
     该阶段主要产出概念模型：
	  E-R:概念模型主要使用E-R图来进行实现，主要是用来描述实体和实体之间的一种关系的图形。
	  E-R图中主要有三要素：
	  实体：主要就是系统中一些参与的主题，是现实生活中客观存在的一些事务。例如：图书，学生，老师,.....
	        在E-R图中使用矩形框来表示实体。
	  属性：属性就是对实体的一些描述信息，也就是实体的特征。
	        在E-R图中属性使用椭圆来表示。
	  关系：主要就是用来表示实体和实体之间的一种联系。
	        在E-R图中关系使用菱形来表示。
			实体和实体之间主要存在三种关系：
			1.一对一：实体集A中的每一个实体在实体集B中都只有唯一的一个与之对应，反之亦然。
			         例如：人和身份证
					 1：1
			2.一对多|多对一：实体集A中的每一个实体在实体集B中有多个实体相对应，实体集B中有多个实体对应实体集A中的一个实体。
			         例如：班级和学生        
			         1:m   m:1   
			3.多对多：实体集A中的每一个实体在实体集B中有多个实体相对应，反之亦然。
			         例如：老师和学生
	                 n:m
	  
   
   2.详细设计：
      主要产出：逻辑模型
	    在概念模型的基础上，要明确每一个实体主键是什么，每一个属性的域是什么等等。
		在实际的工作中一般会借助于一些建模工具，例如：PD建模工具
		
		
   3.开发阶段：
       物理模型：具体数据库中的表，明确具体要使用的数据库是什么，然后再将逻辑模型转换成物理模型。
	   
	   
	   
	   
	流程：
	  1.先画E-R图来构建概念模型
	  2.根据E-R图使用建模工具来构建逻辑模型
	  3.将逻辑模型转换成物理模型
	  4.使用建模工具来生成建表语句的sql文件
	  5.将sql文件导入到对应的数据库中
	     导入到数据库方式：
		     1.可以使用工具进行导入：使用PL/SQLdev
			 2.使用命令：从命令窗口登录到Oracle系统中
			             执行：start   sql文件的地址
	  



SQL语言的分类：
    DQL:数据查询语言，主要就是用来检索数据库中相关的数据，是数据库中使用最广泛的语言。
	关键字：select
	DML：数据操纵语言，主要是对数据库中的表里面的数据进行操作（增删改）
	关键字：insert    update     delete     merge into 
	DDL:数据定义语言，主要是对数据库中对象创建，删除修改操作。
	关键字：create    drop    alter   truncate
	TCL:事务控制语言，主要是对数据库中的事务操作
	关键字：commit   rollback    savepoint
	DCL:数据控制语言,主要是对数据库中的权限操作
	关键字：grant       revoke
	
	
数据库对象-------表空间（重点了解）
关键字：tablespace
数据库中表空间一个逻辑划分的概念，数据库中所有的对象都是保存再表空间中，也是数据库中保存数据最上层的单元。
由于数据库中大多数保存的都是数据库的表，所以叫做表空间。
Oracle数据库安装好之后最少都会创建一个表空间，该表空间就是SYSTEM表空间。

表空间是一个逻辑概念，从逻辑结构上来说是保存数据的最大单元，但是从物理层面来说数据其实是保存在数据文件中。
表空间和数据文件关系：表空间和数据文件之间是一对多的关系，一个表空间中允许有多个数据文件，但是一个数据文件只能属于一个表空间。
作用：
   1.可以控制用户所使用数据库资源的份额。
   2.灵活的使用表空间可以提高程序的性能。
   3.将日志数据和业务数据分开保存，提高数据的安全性。
   
 表空间的数据字典：dba_data_file  
 --查询数据库中的所有的表空间
	SELECT * FROM dba_data_files;
	注意：所有易DBA_开头的数据字典都必须要易管理员的身份进行访问。
 系统默认表空间：
 SYSTEM：系统表空间，主要是用来保存系统中的数据字典信息以及管理员的对象数据。 
 SYSAUX:系统辅助表空间，是Oracle10g版本中引入的一个新表空间，主要用来缓解系统表空间的压力。
 UNDO:撤销表空间，主要是用来保存一些删除或者是修改的旧数据，该表空间中的数据可以回滚。
 USERS:用户表空间，普通用户创建的对象没有指定表空间则默认使用该表空间。
 EXAMPLE:样例表空间，主要保存一些样例数据。
 TEMP:临时表空间，主要保存一些临时数据。

 自定义表空间：
 语法：create [smallfile|bigfile] tablespace  表空间名  datafile '数据文件的地址和名称' size 大小 [reuse]
       [autoextend on|off  next 扩展的大小]
	   [maxsize 最大上线|unlimited]
	   .....
  
 	详解：
	 smallfile：小文件表空间，如果在创建的时候省略则默认就是小文件表空间
	          特点：1.小文件表空间允许有多个数据文件，但是最多只能有1024个数据文件，每一个数据文件默认的上限32G
	 bigfile：大文件表空间,在创建的时候必须要指定bigfile
	          特点：大文件表空间中只能有一个数据文件，数据文件上限为32T
	
	 reuse:如果设置该选项，则在创建表空间的时候如果数据文件存在，则会删除重新创建，否则报错
     autoextend：设置数据文件的自动扩展，默认off，如果设置了on则必须要设置next
	 maxsize:设置数据文件的最大上限。
   
   
   --创建一个表空间tbs_01，数据文件保存到D:\DBF\TBS_01.DBF  初始大小10m  允许自动扩展，每次扩展5M，无上限
CREATE TABLESPACE tbs_02 DATAFILE 'D:\DBF\TBS_01.DBF' SIZE 10m 
AUTOEXTEND ON NEXT 5m MAXSIZE UNLIMITED;

--创建一个大表空间tbs_big01,数据文件保存到D:\DBF\TBS_big01.DBF,初始大小10m 允许自动扩展5M 上限1G
CREATE BIGFILE TABLESPACE tbs_big01 DATAFILE 'D:\DBF\TBS_big01.DBF' SIZE 10m 
AUTOEXTEND ON NEXT 5m MAXSIZE 1g;


查询表空间创建语句：
select dbms_metadata.get_ddl('TABLESPACE','表空间名') from dual;
--查询表空间的创建语句
select dbms_metadata.get_ddl('TABLESPACE','TBS_02') from dual;

注意：1.表空间的名称必须要大写
      2.查询出来的数据是一个CLOB类型（文本类型）
	  
	  
数据库表空间的维护：
    1.修改表空间中数据文件的大小：
	   修改小文件表空间中数据文件的大小：
	   语法：alter database datafile '数据文件的路径名' resize  大小;
	   --修改tbs_02数据文件的大小
		ALTER DATABASE DATAFILE 'D:\DBF\TBS_01.DBF' RESIZE 20m;
		
	    修改大文件表空间的数据文件的大小：
		语法：alter tablespace 表空间名   resize  大小。
		ALTER TABLESPACE tbs_big01 RESIZE 10m;
	   
	   
	2.添加数据文件：
	  注意：大文件表空间中不允许添加数据文件
	  语法：alter tablespace 表空间名 add datafile '数据文件的路径地址' size 大小  .......
	  --添加数据文件
	  ALTER TABLESPACE tbs_02 ADD DATAFILE 'D:\DBF\TBS_02.DBF' SIZE 10m;
	  
	
	3.删除数据文件:
	  注意：1.大文件表空间中不允许删除数据文件
	        2.小文件表空间允许删除数据文件，但是不能删除初始的第一个数据文件。
	  语法：alter tablespace  表空间名 drop datafile '数据文件的地址';
	  
	  ALTER TABLESPACE tbs_02 DROP DATAFILE 'D:\DBF\TBS_02.DBF';
	  
	
	4.删除表空间：
	  语法：drop tablespace 表空间名 [including content][cascade constraints]
	  
	  including contents:如果表空间中有数据，则直接删除会报错，必须要指定including contents 
	  cascade constraints:在删除的设置设置该选项，则会删除和该表空间中级联的一些约束条件。
    	
	  --删除表空间
		DROP TABLESPACE tbs_big01;

		DROP TABLESPACE tbs_1;
			  
	注意：1.删除表空间的时候默认不会删除数据文件，需要手动删除
          2.如果要删除表空间中的最后一个数据文件，则必须要先删除表空间，然后在删除数据文件。	
	  
	
面试题：请描述表空间，用户模式，表之间的关系？
        表空间：是数据库中保存数据的最大的逻辑单元，数据库中的所有的对象都是保存在表空间中的。
		用户模式：代表一个用户下面所有的数据库对象的集合。
		表：是数据库中保存数据的最小单元。
		
		表必须要属于某一个用户模式，表中的数据是保存在表空间的数据文件中的。
		表空间中包含了用户模式以及表，用户模式中包含了表。
		






