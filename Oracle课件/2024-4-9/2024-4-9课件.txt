1.分区索引：在分区表上创建的索引
    分区索引分类：
	1.本地索引：local index
	 创建的语法：
	 create index 索引名 on  表名(索引列) local;
	 特点：1.索引的分区数量和表的分区数量是一致的。
	       2.索引分区的分区列必须要和表分区的分区列保持一致。
	
	--在分区表上创建本地索引
    CREATE INDEX local_index ON range_table(NAME) LOCAL;
	
	2.全局索引：global index
     创建语法：
	  create  index 索引名 on 表名(索引列) global 
	  partition by 分区类型(分区列)
	  (
	    partition 分区名 ........，
		partition 分区名 ........,
		.......
	  )
    特点：1.全局索引的分区数量不一定要和表分区的数量一致。
	      2.全局索引的分区列也不一定要和表分区的分区列一致。

    --在分区表上创建一个全局索引
	DROP INDEX global_index;
	CREATE INDEX global_index ON range_table(NAME) GLOBAL
	PARTITION BY HASH(NAME)
	(PARTITION index_p1,
	PARTITION index_p2);
	
	
	查询一个索引分区的数据字典：dba_ind_partitions;
	SELECT * FROM Dba_Ind_Partitions WHERE index_name='LOCAL_INDEX';
	
	前缀索引：如果索引列包含了分区列，并且分区列是在索引列的最前面，则叫做前缀索引，全局索引必须要是前缀索引。
	非前缀索引：如果索引列没有包含分区列，则叫做非前缀索引，本地索引可以是非前缀索引。
	
	总结：1.本地索引可以是前缀索引也可以不是前缀索引，但是全局索引必须要是前缀索引。
	      2.不管是全局索引还是本地索引，只要查询条件中包含了分区列，则在查询的时候只会查询对应分区的数据。
		  3.本地索引不需要自己维护，当数据发生变化系统会自动维护本地索引，全局索引需要自己手动更新。
		  4.全局索引一般使用比较多的是范围和hash分区，本地索引使用位图索引比较多。
		  5.如果查询的是某一个分区中的数据，则本地索引的效率比较高，但是如果要查询的是全表的数据，则全局索引的效率比较高。
		  
		  
    
常见的索引相关问题和解决方案：
  1.在查询数据的时候发现没有使用到索引。
     在很多时候系统的优化器认为全表扫描的效率要高于使用索引扫描，或者是在查询的时候查询条件中使用了一些函数等，
	 来阻止了索引的使用，则直接不会使用索引。  
	 解决方案：
	   查看执行计划，预期使用的索引是否被使用，如果没有使用，则需要检查是什么原因导致的。
	   
	   例如：
	   --查询入职日期为2023年的员工的信息
		--原来方案：导致索引失效：原因：使用了函数
		SELECT * FROM emp WHERE to_char(hiredate,'yyyy')=2023;
		--创建一个索引
		CREATE INDEX hiredate_ind ON emp(hiredate);
		--优化之后的方案：索引生效
		SELECT * FROM emp WHERE hiredate BETWEEN to_date('2023-1-1','yyyy-mm-dd') AND to_date('2023-12-31','yyyy-mm-dd');
  2.索引碎片：
     如果经常对表进行插入，删除，修改操作，就会导致索引碎片化，这样就会影响查询的效率。
	 解决方案：定期进行索引的重建，来减少索引碎片，但是需要注意就是，索引重建会消耗大量的资源，并且在重建期间索引不能被使用，
	           所以需要选择一个比较合适的时间进行重建。
			   
	        可以先删除，然后再新建或者直接重建索引;
			重建索引的语法：alter index 索引名 rebuild;
  3.索引过多
     如果表中由太多的索引，则可能会影响插入和修改的性能
     解决方案：定期要对索进行审查，删除一些不再需要的索引。
     
     删除索引的语法：drop index 索引名	 
 
 
 
 1.oracle数据库的优化（重点）
  1.在设计阶段优化：
    1.考虑是否要使用物化视图来提高查询效率(业务系统中使用比较多)
	  (1)如果要经常从远程的服务器获取一些数据，并且这些数据的变化频率不高，则可以在本地创建对应的物化视图来提高查询效率。
	  (2)如果要经常基于多张表关联结果进行查询，则可以将多张表关联的结果创建为一个物化视图来提高查询效率。
	2.考虑是否要使用表分区来进行提高查询效率。
	   如果表中的数据量比较大，并且要经常基于某一些列来进行数据查询操作，则可以考虑在这些列上创建分区，从而提高查询效率。
	3.考虑是否要在表上创建索引。
	  
	   
  2.在开发阶段进行优化：
    1.sql语句以及PL/SQL块优化。
	  1.要合理的使用索引，尽量避免索引失效，也就是说再过滤的时候再一些索引列上尽量不要使用函数或者运算符。
	  2.再查询的时候尽量不要使用“*”，并且列出所需要的列即可。因为“*”在查询的时候系统会先去数据字典中查找该表的所有列的名称，
	    然后将*替换为列名，然后再执行查询操作，效率比较低。
	  3.再清空数据的时候，尽量使用truncate来代替delete。
	  4.再PL/SQL块中，再保证数据完整性的前提下，尽量多使用commit.
	  5.合理的使用exists和in,在实际的工作中推荐使用exists
	  6.在进行表关联的时候尽量将小表写在左边，大表写在右边，可以提高关联的效率。
	  7.在表关联的时候，如果有过滤条件，尽量先过滤然后再进行关联。
	  8.在写where条件的时候，因为条件的执行顺序从右往左，所以建议将过滤多的数据的条件写道where的最后面。
	  9.尽量减少表的查询次数，尽量避免使用关联子查询。
	  
	PL/SQL块的优化：
        1.从业务层面考虑
          看是否能够简化计算过程，或者是简化计算口径的方式。
        2.考虑sql/SQl中的sql语句是否可以优化
		  参考上面的操作
		 
		   
	 排查问题：
	    1.看日志，查找出现错误的原因，如果没有错误则继续排查。
		2.查看资源是否被占用等等
	     
	
    2.学会查看执行计划
	  执行计划主要就是系统预估每一条sql语句执行顺序，以及在执行的过程中所花费开销。
	  查看执行计划方式：
	   1.在PL/SQL块中点击“解释计划”或者“F5”快捷键来查询sql语句的执行计划。
	   2.使用explain关键字来查看sql语句的执行计划
	     语法：生成执行计划
		        explain plan for select语句；
			   查看执行计划
			    select * from table(dbms_xplan.display)；
		 注意：使用explain生成的执行计划，会保存到一个表类型中，所以可以使用table来访问。
	    3.使用 set autotrace来查询执行计划（只能在命令窗口的sqlplus中执行，并且要以管理员的身份才能查询）
		    语法：1.设置执行计划的模式：
			        set autotrace 模式：
				  
				  常见的模式：
				          on:会输出sql语句的结果，执行计划以及统计信息
						  traceonly:只输出执行计划和统计信息，不输出结果
						  traceonly explain:只有执行计划，没有结果和统计信息
						  tranceonly statistics:只有统计信息，没有结果和执行计划
				  2.执行sql语句

			SQL> set autotrace traceonly statistics
			SQL> select * from scott.emp; 
					
	执行计划常见的参数：
	   rows(基数):返回每一步执行的行数
	   bytes(字节):返回每一步预估的字节数
	   cost(CPU消耗):预估每一步执行的过程中cpu消耗清空，该数值越小越好，该值可能和时机的情况有出入。
	   time(时间):每一步消耗的时间
	   
	查看执行计划步骤的时候：先里后外，从上到下。
		
	执行计划中需要关注的内容:
     	1.表扫描方式：
		   table access full:全表扫描
		    如果在查询数据的时候没有给过滤的列设置索引，则会进行全表扫描。
			如果查询的数据量超过表的整体的数据量一定比例则也会进行全表扫描。
			如果查询的时候索引失效，也会进行全表扫描。
		   table access by index rowid:通过扫描索引获取数据的rowid然后在查询数据。
		      常见索引扫描的方式：
			  index unique scan:索引唯一扫描
			  场景：如果使用的是唯一索引，并且查询的数据使用等于进行过滤，使用唯一索引扫描出来的数据有且仅有一行。
			  index range scan:索引范围扫描
			  场景：1.如果我们是唯一索引，但是在查询的时候使用的一些范围过滤的关键字，则也会使用范围扫描。
			        2.如果使用的是一个非唯一索引，则在查询的时候就会使用范围索引扫描。
		      index full scan:全索引扫描
			  场景：如果在查询数据的时候数据直接可以从索引中全部获取，则可以使用index full scan
			        会对数据进行排序操作
			  index fast full scan:快速全索引扫描
			        不会对数据排序，直接根据索引物理位置按照顺序扫描，理论上速度闭full scan快。
		    TABLE ACCESS BY USER ROWID：直接使用rowid来扫描数据，是效率最高的一种方式。
			  
		
		
		2.表的连接方式：
		  1.hash join(哈希连接)：主要是通过计算表中的关联列的hash值然后在进行匹配完成关联的操作。
		    先将小表的hash值保存到内存中，然后从另外一张表中获取关联列的值计算对应的hash值和内存中的hash进行匹配。
			使用场景：1.表的数据量比较小，或者一张大表和一张小表关联。
			          2.hash连接只适用于等值连接
			
			优点：当两个表的数据量相差很大的时候，关联的效率很高。
			缺点：由于需要将一张表读入到内存中，所以消耗比较高，当然如果内存不够也可以写入到磁盘。   
					  		  
					  
		  2.sort merge join(排序合并连接)：
		    先将两张表按照关联的列进行排序，排好序将数据保存到内存或者磁盘，然后将结果进行合并。
			使用场景：经常会使用一些非等值连接一些表关联中，并且如果在关联之前已经对数据排好序，则他的效率是高于hash join.
		  3.nested loops join:(循环嵌套连接)：
		    在连接的时候，系统会先确定一张驱动表(外层表),和一张被驱动表(内层表),先从驱动表中获取一条数据，然后在被驱动表中进行匹配。
	       使用场景：如果驱动表的数据比较小，并且在被驱动表中创建关联列的索引，则执行效率就会比较高。
		   
		   
		连接方式：   hash  join                     sort merge join                     nested loops join 
		使用条件： 只能使用等值连接               可以使用在不等值连接                 任何连接
		使用资源：  内存，磁盘                     内存，磁盘                           磁盘I/O
		优点：      如果关联的表关联列             可以进行不等值连接，              如果关联的表中关联列创建索引，
		            没有创建索引，或者是            如果是输入的关联表               关联的列的基数比较大的情况下，
					有一张小表和一张大表            已经排好序，则建议使用           使用循环嵌套连接效率比较高。
					进行关联的时候，效率            排序合并连接。
					比较高。
	
    3.使用hints来修改执行计划	
	   hints是Oralce中提供的一种特殊的语法结果，在sql语句中嵌入一些语句，来改变sql语句原来的执行方式。
	   语法结构：
	   /*+函数(....)*/
	   
	   注意：1.*和+之间不允许有空格。
	         2.如果在sql语句中给表设置了别名，则必须要在hints语句中也是用表别名。
			 3.hints语法如果有错误，不会报错，只是设置不生效。
			 
		--修改执行计划进行全表扫描   +full(表名)
		SELECT /*+full(s)*/ sname,sage FROM student s WHERE sname='张三';
		--修改执行计划中使用的索引   +index(表名,索引名,索引名,...)
		SELECT /*+index(emp,INDX_NAME_JOB)*/ * FROM emp WHERE ename='SCOTT';

		--修改表的连接方式排序合并连接： +use_merge(表名,表名)
		SELECT /*+use_merge(e,d)*/  * FROM emp e JOIN dept d ON e.deptno=d.deptno;

		--修改表的连接方式为循环嵌套：+use_nl(表名,表名)
		SELECT /*+use_nl(e,d)*/  * FROM emp e JOIN dept d ON e.deptno=d.deptno;

		--修改使用hash join方式连接：use_hash(表名,表名)
		SELECT /*+use_hash(e,d)*/  * FROM emp e JOIN dept d ON e.deptno=d.deptno;	 